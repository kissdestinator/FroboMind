/* Auto-generated by genmsg_cpp for file /tmp/buildd/ros-electric-common-msgs-1.6.0/debian/ros-electric-common-msgs/opt/ros/electric/stacks/common_msgs/diagnostic_msgs/msg/DiagnosticStatus.msg */
#ifndef DIAGNOSTIC_MSGS_MESSAGE_DIAGNOSTICSTATUS_H
#define DIAGNOSTIC_MSGS_MESSAGE_DIAGNOSTICSTATUS_H
#include <string>
#include <vector>
#include <map>
#include <ostream>
#include "ros/serialization.h"
#include "ros/builtin_message_traits.h"
#include "ros/message_operations.h"
#include "ros/time.h"

#include "ros/macros.h"

#include "ros/assert.h"

#include "diagnostic_msgs/KeyValue.h"

namespace diagnostic_msgs
{
template <class ContainerAllocator>
struct DiagnosticStatus_ {
  typedef DiagnosticStatus_<ContainerAllocator> Type;

  DiagnosticStatus_()
  : level(0)
  , name()
  , message()
  , hardware_id()
  , values()
  {
  }

  DiagnosticStatus_(const ContainerAllocator& _alloc)
  : level(0)
  , name(_alloc)
  , message(_alloc)
  , hardware_id(_alloc)
  , values(_alloc)
  {
  }

  typedef int8_t _level_type;
  int8_t level;

  typedef std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  _name_type;
  std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  name;

  typedef std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  _message_type;
  std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  message;

  typedef std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  _hardware_id_type;
  std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  hardware_id;

  typedef std::vector< ::diagnostic_msgs::KeyValue_<ContainerAllocator> , typename ContainerAllocator::template rebind< ::diagnostic_msgs::KeyValue_<ContainerAllocator> >::other >  _values_type;
  std::vector< ::diagnostic_msgs::KeyValue_<ContainerAllocator> , typename ContainerAllocator::template rebind< ::diagnostic_msgs::KeyValue_<ContainerAllocator> >::other >  values;

  enum { OK = 0 };
  enum { WARN = 1 };
  enum { ERROR = 2 };

  ROS_DEPRECATED uint32_t get_values_size() const { return (uint32_t)values.size(); }
  ROS_DEPRECATED void set_values_size(uint32_t size) { values.resize((size_t)size); }
  ROS_DEPRECATED void get_values_vec(std::vector< ::diagnostic_msgs::KeyValue_<ContainerAllocator> , typename ContainerAllocator::template rebind< ::diagnostic_msgs::KeyValue_<ContainerAllocator> >::other > & vec) const { vec = this->values; }
  ROS_DEPRECATED void set_values_vec(const std::vector< ::diagnostic_msgs::KeyValue_<ContainerAllocator> , typename ContainerAllocator::template rebind< ::diagnostic_msgs::KeyValue_<ContainerAllocator> >::other > & vec) { this->values = vec; }
private:
  static const char* __s_getDataType_() { return "diagnostic_msgs/DiagnosticStatus"; }
public:
  ROS_DEPRECATED static const std::string __s_getDataType() { return __s_getDataType_(); }

  ROS_DEPRECATED const std::string __getDataType() const { return __s_getDataType_(); }

private:
  static const char* __s_getMD5Sum_() { return "67d15a62edb26e9d52b0f0efa3ef9da7"; }
public:
  ROS_DEPRECATED static const std::string __s_getMD5Sum() { return __s_getMD5Sum_(); }

  ROS_DEPRECATED const std::string __getMD5Sum() const { return __s_getMD5Sum_(); }

private:
  static const char* __s_getMessageDefinition_() { return "# This message holds the status of an individual component of the robot.\n\
# \n\
\n\
# Possible levels of operations\n\
byte OK=0\n\
byte WARN=1\n\
byte ERROR=2\n\
\n\
byte level # level of operation enumerated above \n\
string name # a description of the test/component reporting\n\
string message # a description of the status\n\
string hardware_id # a hardware unique string\n\
KeyValue[] values # an array of values associated with the status\n\
\n\
\n\
================================================================================\n\
MSG: diagnostic_msgs/KeyValue\n\
string key # what to label this value when viewing\n\
string value # a value to track over time\n\
\n\
"; }
public:
  ROS_DEPRECATED static const std::string __s_getMessageDefinition() { return __s_getMessageDefinition_(); }

  ROS_DEPRECATED const std::string __getMessageDefinition() const { return __s_getMessageDefinition_(); }

  ROS_DEPRECATED virtual uint8_t *serialize(uint8_t *write_ptr, uint32_t seq) const
  {
    ros::serialization::OStream stream(write_ptr, 1000000000);
    ros::serialization::serialize(stream, level);
    ros::serialization::serialize(stream, name);
    ros::serialization::serialize(stream, message);
    ros::serialization::serialize(stream, hardware_id);
    ros::serialization::serialize(stream, values);
    return stream.getData();
  }

  ROS_DEPRECATED virtual uint8_t *deserialize(uint8_t *read_ptr)
  {
    ros::serialization::IStream stream(read_ptr, 1000000000);
    ros::serialization::deserialize(stream, level);
    ros::serialization::deserialize(stream, name);
    ros::serialization::deserialize(stream, message);
    ros::serialization::deserialize(stream, hardware_id);
    ros::serialization::deserialize(stream, values);
    return stream.getData();
  }

  ROS_DEPRECATED virtual uint32_t serializationLength() const
  {
    uint32_t size = 0;
    size += ros::serialization::serializationLength(level);
    size += ros::serialization::serializationLength(name);
    size += ros::serialization::serializationLength(message);
    size += ros::serialization::serializationLength(hardware_id);
    size += ros::serialization::serializationLength(values);
    return size;
  }

  typedef boost::shared_ptr< ::diagnostic_msgs::DiagnosticStatus_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::diagnostic_msgs::DiagnosticStatus_<ContainerAllocator>  const> ConstPtr;
  boost::shared_ptr<std::map<std::string, std::string> > __connection_header;
}; // struct DiagnosticStatus
typedef  ::diagnostic_msgs::DiagnosticStatus_<std::allocator<void> > DiagnosticStatus;

typedef boost::shared_ptr< ::diagnostic_msgs::DiagnosticStatus> DiagnosticStatusPtr;
typedef boost::shared_ptr< ::diagnostic_msgs::DiagnosticStatus const> DiagnosticStatusConstPtr;


template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const  ::diagnostic_msgs::DiagnosticStatus_<ContainerAllocator> & v)
{
  ros::message_operations::Printer< ::diagnostic_msgs::DiagnosticStatus_<ContainerAllocator> >::stream(s, "", v);
  return s;}

} // namespace diagnostic_msgs

namespace ros
{
namespace message_traits
{
template<class ContainerAllocator> struct IsMessage< ::diagnostic_msgs::DiagnosticStatus_<ContainerAllocator> > : public TrueType {};
template<class ContainerAllocator> struct IsMessage< ::diagnostic_msgs::DiagnosticStatus_<ContainerAllocator>  const> : public TrueType {};
template<class ContainerAllocator>
struct MD5Sum< ::diagnostic_msgs::DiagnosticStatus_<ContainerAllocator> > {
  static const char* value() 
  {
    return "67d15a62edb26e9d52b0f0efa3ef9da7";
  }

  static const char* value(const  ::diagnostic_msgs::DiagnosticStatus_<ContainerAllocator> &) { return value(); } 
  static const uint64_t static_value1 = 0x67d15a62edb26e9dULL;
  static const uint64_t static_value2 = 0x52b0f0efa3ef9da7ULL;
};

template<class ContainerAllocator>
struct DataType< ::diagnostic_msgs::DiagnosticStatus_<ContainerAllocator> > {
  static const char* value() 
  {
    return "diagnostic_msgs/DiagnosticStatus";
  }

  static const char* value(const  ::diagnostic_msgs::DiagnosticStatus_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct Definition< ::diagnostic_msgs::DiagnosticStatus_<ContainerAllocator> > {
  static const char* value() 
  {
    return "# This message holds the status of an individual component of the robot.\n\
# \n\
\n\
# Possible levels of operations\n\
byte OK=0\n\
byte WARN=1\n\
byte ERROR=2\n\
\n\
byte level # level of operation enumerated above \n\
string name # a description of the test/component reporting\n\
string message # a description of the status\n\
string hardware_id # a hardware unique string\n\
KeyValue[] values # an array of values associated with the status\n\
\n\
\n\
================================================================================\n\
MSG: diagnostic_msgs/KeyValue\n\
string key # what to label this value when viewing\n\
string value # a value to track over time\n\
\n\
";
  }

  static const char* value(const  ::diagnostic_msgs::DiagnosticStatus_<ContainerAllocator> &) { return value(); } 
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

template<class ContainerAllocator> struct Serializer< ::diagnostic_msgs::DiagnosticStatus_<ContainerAllocator> >
{
  template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
  {
    stream.next(m.level);
    stream.next(m.name);
    stream.next(m.message);
    stream.next(m.hardware_id);
    stream.next(m.values);
  }

  ROS_DECLARE_ALLINONE_SERIALIZER;
}; // struct DiagnosticStatus_
} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::diagnostic_msgs::DiagnosticStatus_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const  ::diagnostic_msgs::DiagnosticStatus_<ContainerAllocator> & v) 
  {
    s << indent << "level: ";
    Printer<int8_t>::stream(s, indent + "  ", v.level);
    s << indent << "name: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::stream(s, indent + "  ", v.name);
    s << indent << "message: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::stream(s, indent + "  ", v.message);
    s << indent << "hardware_id: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::stream(s, indent + "  ", v.hardware_id);
    s << indent << "values[]" << std::endl;
    for (size_t i = 0; i < v.values.size(); ++i)
    {
      s << indent << "  values[" << i << "]: ";
      s << std::endl;
      s << indent;
      Printer< ::diagnostic_msgs::KeyValue_<ContainerAllocator> >::stream(s, indent + "    ", v.values[i]);
    }
  }
};


} // namespace message_operations
} // namespace ros

#endif // DIAGNOSTIC_MSGS_MESSAGE_DIAGNOSTICSTATUS_H

